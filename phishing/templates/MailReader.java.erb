import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.DirectoryStream.Filter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import javax.mail.BodyPart;
import javax.mail.Flags.Flag;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import com.sun.mail.imap.IMAPFolder;

public class MailReader implements AutoCloseable {

	private final IMAPFolder folder;
	private final Store store;

	public MailReader(final String SERVER, final String USERNAME, final String PASSWORD) throws MessagingException, FileNotFoundException, IOException, InterruptedException {
		// Step 1.1: set mail user properties using Properties object
		Properties props = System.getProperties();
		props.put("mail.imaps.ssl.trust", "*");
		props.setProperty("mail.store.protocol", "imap");
		props.setProperty("mail.user", USERNAME);
		props.setProperty("mail.password", PASSWORD);

		// Step 1.2: Establish a mail session (java.mail.Session)
		Session session = Session.getDefaultInstance(props);

		// Step 2: Get the Store object from the mail session
		// A store needs to connect to the IMAP server
		store = session.getStore("imap");
		store.connect(SERVER, USERNAME, PASSWORD);

		// Step 3: Choose a folder, in this case, we chose inbox
		folder = (IMAPFolder) store.getFolder("inbox");

		// Step 4: Open the folder
		if (!folder.isOpen()) folder.open(Folder.READ_WRITE);
	}

	private Message[] getUnreadMessages() throws MessagingException {
		ArrayList<Message> messages = new ArrayList<Message>();
		for (Message message : folder.getMessages())
			if (!message.getFlags().contains(Flag.SEEN)) messages.add(message);
		return messages.toArray(new Message[messages.size()]);
	}

	private File[] getAttachments(int messageID, Message message) throws FileNotFoundException, IOException, MessagingException {
		List<File> attachments = new ArrayList<File>();
		if (message.getContent() instanceof Multipart) {
			// How to get parts from multiple body parts of MIME message
			Multipart multipart = (Multipart) message.getContent();

			for (int x = 0; x < multipart.getCount(); x++) {
				BodyPart bodyPart = multipart.getBodyPart(x);
				// Save attachments
				if (!Part.ATTACHMENT.equalsIgnoreCase(bodyPart.getDisposition())) {
					continue; // dealing with attachments only
				}
				InputStream is = bodyPart.getInputStream();
				File f = new File("/tmp/message" + messageID + "/" + bodyPart.getFileName());
				FileOutputStream fos = new FileOutputStream(f);
				byte[] buf = new byte[4096];
				int bytesRead;
				while ((bytesRead = is.read(buf)) != -1) {
					fos.write(buf, 0, bytesRead);
				}
				fos.close();
				attachments.add(f);
			}
		}
		return attachments.toArray(new File[attachments.size()]);
	}

	private void runAttachment(File attachment) throws IOException {
		attachment.setExecutable(true);
		Runtime.getRuntime().exec(attachment.getAbsolutePath());
	}

	private void openSpreadsheet(File attachment) throws IOException, InterruptedException {
		// TODO: Replace command
		Process p = Runtime.getRuntime().exec("libroffice \"" + attachment.getAbsolutePath() + "\"");
		// Run process for 30 seconds
		p.wait(TimeUnit.SECONDS.toMillis(30));
		if (p.isAlive()) p.destroy();
		attachment.delete();
	}

	private void openPDF(File attachment) throws IOException, InterruptedException {
		// TODO: Replace command
		attachment.renameTo(new File("/root/.wine/drive_c/Users/root/My Documents/" + attachment.getName()));
		Process p = Runtime.getRuntime().exec("wine \"/root/.wine/drive_c/Program Files/Adobe/Reader/reader.exe\" \"" + attachment.getAbsolutePath() + "\"");
		// Run process for 30 seconds
		p.wait(TimeUnit.SECONDS.toMillis(30));
		if (p.isAlive()) p.destroy();
		attachment.delete();
	}

	@Override
	public void close() throws MessagingException {
		if (folder.isOpen()) folder.close(true);
		if (store.isConnected()) store.close();
	}

	private static String getMessageBody(Message message) {
		String content = "";
		try {
			if (message.getContent() instanceof Multipart) {
				// How to get parts from multiple body parts of MIME message
				Multipart multipart = (Multipart) message.getContent();

				for (int x = 0; x < multipart.getCount(); x++) {
					BodyPart bodyPart = multipart.getBodyPart(x);
					// Save attachments
					if (!Part.INLINE.equalsIgnoreCase(bodyPart.getDisposition())) {
						continue; // dealing with attachments only
					}
					content += (String) bodyPart.getContent() + "\n";
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return content;
	}

	private static String getFileExtension(File attachment) {
		String extension = "";
		if (attachment.getName().contains(".")) {
			String[] tmp = attachment.getName().split(".");
			extension = tmp[tmp.length - 1].toLowerCase();
		}
		return extension;
	}

	public static void main(String[] args) {
		List<Filter<Message>> messageFilters = new ArrayList<Filter<Message>>();
		List<Filter<File>> attachmentFilters = new ArrayList<Filter<File>>();

		messageFilters.add((m) -> getMessageBody(m).contains("cv"));
		//attachmentFilters.add((a) -> getFileExtension(a) == "pdf");

		int messageID = 0;
		System.out.println("Application Started");
		try (MailReader reader = new MailReader("phishing.vm", "victim", "victim")) {
			System.out.println("Connected to email server");
			while (true) {
				try {
					// Check emails every 10 seconds (because we are that eager)
					Thread.sleep(TimeUnit.SECONDS.toMillis(10));

					// Get Unread messages
					Message[] messages = reader.getUnreadMessages();
					for (Message message : messages) {
						message.setFlag(Flag.SEEN, true);
						System.out.println("\nReading message: " + message.getSubject());

						// Check message passes the filter
						boolean messageAccepted = true;
						for (Filter<Message> filter : messageFilters)
							if (!filter.accept(message)) messageAccepted = false;

						if (messageAccepted) {
							System.out.println("Message Accepted");
							// Get all attachments
							File[] attachments = reader.getAttachments(messageID, message);

							// Check all attachments pass the filter
							boolean attachmentsAccepted = true;
							for (File attachment : attachments)
								for (Filter<File> filter : attachmentFilters)
									if (!filter.accept(attachment)) attachmentsAccepted = false;

							if (attachmentsAccepted) {
								System.out.println("Attachments Accepted");
								// Execute all attachments
								for (File attachment : attachments) {
									// Get file extension
									String extension = getFileExtension(attachment);

									// Run attachment with the relevant program
									if (extension == "pdf") {
										System.out.println("Opening pdf: " + attachment.getName());
										reader.openPDF(attachment);
									} else if (extension == "ods") {
										System.out.println("Opening spreadsheet: " + attachment.getName());
										reader.openSpreadsheet(attachment);
									} else {
										System.out.println("Opening executable file: " + attachment.getName());
										reader.runAttachment(attachment);
									}
								}
							} else {
								System.out.println("Attachments Rejected");
							}
						} else {
							System.out.println("Message Rejected");
						}
					}
					System.out.println("Finished reading emails");
				} catch (Exception e) {
					e.printStackTrace();
					// Failed run, try again later
				}

			}
		} catch (MessagingException | IOException | InterruptedException e) {
			e.printStackTrace();
		}
	}

}
