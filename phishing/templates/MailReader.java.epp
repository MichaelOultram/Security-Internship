<%- | String $server = '', String $user = '', String $pass = '' | -%>
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.DirectoryStream.Filter;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import javax.mail.BodyPart;
import javax.mail.Flags.Flag;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import com.sun.mail.imap.IMAPFolder;

public class MailReader implements AutoCloseable {
	// Sorry about the messy code but we were pushed for time
	private final IMAPFolder folder;
	private final Store store;
	private Session session;
	private final String server, username, password;

	public MailReader(final String SERVER, final String USERNAME, final String PASSWORD) throws MessagingException, FileNotFoundException, IOException, InterruptedException {
		server = SERVER;
		username = USERNAME;
		password = PASSWORD;
		// Step 1.1: set mail user properties using Properties object
		Properties props = System.getProperties();
		props.put("mail.imaps.ssl.trust", "*");
		props.setProperty("mail.store.protocol", "imap");
		props.setProperty("mail.user", USERNAME);
		props.setProperty("mail.password", PASSWORD);

		// Step 1.2: Establish a mail session (java.mail.Session)
		session = Session.getDefaultInstance(props);

		// Step 2: Get the Store object from the mail session
		// A store needs to connect to the IMAP server
		store = session.getStore("imap");
		store.connect(SERVER, USERNAME, PASSWORD);

		// Step 3: Choose a folder, in this case, we chose inbox
		folder = (IMAPFolder) store.getFolder("inbox");
	}

	private Message[] getUnreadMessages() throws MessagingException {
		ArrayList<Message> messages = new ArrayList<Message>();

		// Open the folder
		if (!folder.isOpen()) folder.open(Folder.READ_WRITE);

		// Get all the messages without a SEEN flag
		for (Message message : folder.getMessages())
			if (!message.getFlags().contains(Flag.SEEN)) messages.add(message);

		// Return the list of unread messages
		return messages.toArray(new Message[messages.size()]);
	}

	private File[] getAttachments(int messageID, Message message) throws FileNotFoundException, IOException, MessagingException {
		List<File> attachments = new ArrayList<File>();
		if (message.getContent() instanceof Multipart) {
			// How to get parts from multiple body parts of MIME message
			Multipart multipart = (Multipart) message.getContent();

			for (int x = 0; x < multipart.getCount(); x++) {
				BodyPart bodyPart = multipart.getBodyPart(x);
				// Save attachments
				if (!Part.ATTACHMENT.equalsIgnoreCase(bodyPart.getDisposition())) {
					continue; // dealing with attachments only
				}
				InputStream is = bodyPart.getInputStream();

				// Ensure a folder exists inside tmp for this messages attachments
				File f = new File("/tmp/message" + messageID);
				f.mkdirs();

				// Extract the attachment and save bytes to a file
				f = new File("/tmp/message" + messageID + "/" + bodyPart.getFileName());
				FileOutputStream fos = new FileOutputStream(f);
				byte[] buf = new byte[4096];
				int bytesRead;
				while ((bytesRead = is.read(buf)) != -1) {
					fos.write(buf, 0, bytesRead);
				}
				fos.close();

				// Add the file to the list of attachments
				attachments.add(f);
			}
		}
		return attachments.toArray(new File[attachments.size()]);
	}

	private void runAttachment(File attachment) throws IOException {
		System.out.println("Running CMD");
		attachment.setExecutable(true);
		Runtime.getRuntime().exec(attachment.getAbsolutePath());
	}

	private void runLibreoffice(File attachment) {
		System.out.println("Running Spreadsheet");
		new Thread(() -> {
			try {
				Process p = Runtime.getRuntime().exec("xvfb-run libroffice \"" + attachment.getAbsolutePath() + "\"");
				// Run process for 30 seconds
				p.wait(TimeUnit.SECONDS.toMillis(30));
				if (p.isAlive()) p.destroy();
			} catch (IOException | InterruptedException e) {
				e.printStackTrace();
			}
		}).run();
	}

	public void sendEmail(Message prevMessage, ArrayList<String> reasons) throws MessagingException {
		// Step 3: Create a message
		MimeMessage message = new MimeMessage(session);
		message.setFrom(new InternetAddress(username + "@worklink.vm"));
		message.setRecipients(Message.RecipientType.TO, "email@local.vm");
		message.setSubject("RE: " + prevMessage.getSubject());
		// message.setText();
		// Create the message part
		BodyPart messageBodyPart = new MimeBodyPart();

		// Now set the actual message
		String msg = "I'm not accepting this email because:\n";
		for (String reason : reasons)
			msg += "* " + reason + "\n";
		msg += "----------\n" + getMessageBody(prevMessage);
		messageBodyPart.setText(msg);

		Multipart multipart = new MimeMultipart();
		multipart.addBodyPart(messageBodyPart);

		// Send the complete message parts
		message.setContent(multipart);

		message.saveChanges();

		// Step 4: Send the message by javax.mail.Transport .
		Transport tr = session.getTransport("smtp");	// Get Transport object from session
		tr.connect(server, username, password); // We need to connect
		tr.sendMessage(message, message.getAllRecipients()); // Send message
	}

	@Override
	public void close() throws MessagingException {
		if (folder.isOpen()) folder.close(true);
		if (store.isConnected()) store.close();
	}

	private static String getMessageBody(Message message) {
		String content = "";
		try {
			if (message.getContent() instanceof Multipart) {
				// How to get parts from multiple body parts of MIME message
				Multipart multipart = (Multipart) message.getContent();

				for (int x = 0; x < multipart.getCount(); x++) {
					BodyPart bodyPart = multipart.getBodyPart(x);
					if (bodyPart.isMimeType("text/plain")) {
						content += (String) bodyPart.getContent() + "\n";
					}
				}
			} else {
				content += (String) message.getContent() + "\n";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return content;
	}

	private static String getFileExtension(File attachment) {
		String extension = "";
		// If attachment name contains a dot
		if (attachment.getAbsolutePath().contains(".")) {
			// Split on dots and get the last segment
			String[] tmp = attachment.getName().split("\\.");
			extension = tmp[tmp.length - 1].toLowerCase();
		}
		return extension;
	}

	private static String getSender(Message m) {
		try {
			return ((InternetAddress) m.getFrom()[0]).getAddress().toLowerCase();
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
	}

	private static Filter<Message> containsKeywords(String[] keywords, int amount) {
		// A filter to check whether message body has enough keywords
		return m -> {
			int counter = 0;
			for (String keyword : keywords)
				if (getMessageBody(m).toLowerCase().contains(keyword.toLowerCase())) counter++;
			return counter >= amount;
		};
	}

	public static void main(String[] args) {
		// A list of filters that each message/attachment must pass
		// I.e. messageFilters.add(m -> m.getSubject().toLowerCase().contains("important"));
		List<Filter<Message>> messageFilters = new ArrayList<Filter<Message>>();
		List<Filter<File>> attachmentFilters = new ArrayList<Filter<File>>();

		// A plaintext reason on why a message failed a test (uses same index as filters)
		// I.e. messageReasons.add("The message didn't seem important to me");
		List<String> messageReasons = new ArrayList<String>();
		List<String> attachmentReasons = new ArrayList<String>();

		int messageID = 0;
		System.out.println("Application Started");
		// Try connecting to the mailserver
		try (MailReader reader = new MailReader("<%= $server %>", "<%= $user %>", "<%= $pass %>")) {
			System.out.println("Connected to email server");

			<% if $user == "s.lord" { %>
			// Sofia Lord filters
			// Message sender is Tom Chothia
			messageFilters.add(m -> getSender(m).startsWith("t.chothia@"));
			messageReasons.add("I don't trust the sender");

			// Message body contains sender name (either Tom or Chothia at least once)
			messageFilters.add(containsKeywords(new String[] { "tom", "chothia" }, 1));
			messageReasons.add("The message doesn't include the sender's name");

			// Message body contains recipient name (either Sofia or Lord at least once)
			messageFilters.add(containsKeywords(new String[] { "sofia", "lord" }, 1));
			messageReasons.add("It's not addressed to me");

			// Message body seems relevant (contains either intern, update or install at least once)
			messageFilters.add(containsKeywords(new String[] { "intern", "update", "install" }, 1));
			messageReasons.add("It's unrelated to me");

			// Attachment has no file extension (i.e. is an executable file)
			attachmentFilters.add(a -> getFileExtension(a).equals(""));
			attachmentReasons.add("I cannot run that file extension");
			<% } elsif $user == "m.pierce" { %>
			// Melanie Pierce filters
			// Message sender is Jed Baker
			messageFilters.add(m -> getSender(m).startsWith("j.baker@"));
			messageReasons.add("I don't trust the sender");

			// Message body contains sender name (either Jed or Baker at least once)
			messageFilters.add(containsKeywords(new String[] { "jed", "baker" }, 1));
			messageReasons.add("The message doesn't include the sender's name");

			// Message body contains recipient name (either Melanie or Pierce at least once)
			messageFilters.add(containsKeywords(new String[] { "melanie", "pierce" }, 1));
			messageReasons.add("It's not addressed to me");

			// Message body seems relevant (contains keywords)
			messageFilters.add(containsKeywords(new String[] { "finance", "balance", "sheet", "profit", "loss", "account" }, 2));
			messageReasons.add("It's unrelated to me");

			// Attachment is a spreadsheet
			attachmentFilters.add(a -> getFileExtension(a) == "ods");
			attachmentReasons.add("I can only edit ods files");
			<% } elsif $user == "c.hampshire" { %>
			// Chris Hampshire filters
			// Message sender is careers (sent via the website)
			messageFilters.add(m -> getSender(m).startsWith("careers@"));
			messageReasons.add("I don't trust the sender");

			// Attachment is a document
			attachmentFilters.add(a -> getFileExtension(a) == "odt");
			messageReasons.add("I can only view odt files");

			// Attachment name begins with a capital letter
			attachmentFilters.add(a -> a.getName().toCharArray()[0] == a.getName().toUpperCase().toCharArray()[0] && a.getName().toCharArray()[0] != a.getName().toLowerCase().toCharArray()[0]);
			attachmentReasons.add("I don't trust the file name");
			<% } else { %>
			// Other (blocks all emails)
			messageFilters.add(m -> false);
			messageReasons.add("I think this is a phishing email");
			<% } %>

			while (true) {
				try {
					// Check emails every 10 seconds (because we are that eager)
					Thread.sleep(TimeUnit.SECONDS.toMillis(10));

					// Get Unread messages
					Message[] messages = reader.getUnreadMessages();
					for (Message message : messages) {
						ArrayList<String> reasonsFailed = new ArrayList<String>();
						message.setFlag(Flag.SEEN, true);
						System.out.println("\nReading message: " + message.getSubject());
						System.out.println("\nFrom: " + getSender(message));

						// Check message passes the filter
						for (Filter<Message> filter : messageFilters)
							if (!filter.accept(message)) reasonsFailed.add(messageReasons.get(messageFilters.indexOf(filter)));

						if (reasonsFailed.isEmpty()) {
							System.out.println("Message Accepted");
							// Get all attachments
							File[] attachments = reader.getAttachments(messageID, message);

							// Check all attachments pass the filter
							for (File attachment : attachments)
								for (Filter<File> filter : attachmentFilters)
									if (!filter.accept(attachment)) reasonsFailed.add(attachmentReasons.get(attachmentFilters.indexOf(filter)));

							if (reasonsFailed.isEmpty()) {
								System.out.println("Attachments Accepted");
								// Execute all attachments
								for (File attachment : attachments) {
									// Get file extension
									String extension = getFileExtension(attachment);

									// Run attachment with the relevant program
									if (extension == "ods" || extension == "odt") {
										System.out.println("Opening libreoffice: " + attachment.getName());
										reader.runLibreoffice(attachment);
									} else {
										System.out.println("Opening executable file: " + attachment.getName());
										reader.runAttachment(attachment);
									}
								}
								messageID++;
							} else {
								System.out.println("Attachments Rejected");
								reader.sendEmail(message, reasonsFailed);
							}
						} else {
							System.out.println("Message Rejected");
							reader.sendEmail(message, reasonsFailed);
						}
					}
					System.out.println("Finished reading emails");
				} catch (Exception e) {
					e.printStackTrace();
					// Failed run, try again later
				}

			}
		} catch (MessagingException | IOException | InterruptedException e) {
			e.printStackTrace();
		}
	}

}
